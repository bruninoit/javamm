/*
 * Dato un numero n>0, la matrice a spirale
 * corrispondente a n e' la matrice nxn, contenente
 * i numeri interi da 1 a n*n inseriti nella
 * matrice secondo un percorso a spirale che,
 * partendo dall'elemento in alto a sinistra,
 * procede prima a destra, poi in basso, poi
 * a sinistra e poi in alto. Ad esempio, la 
 * matrice a spirale corrispondente al numero 3
 * e' la matrice
 * 
 *  1  2  3 
 *  8  9  4 
 *  7  6  5 
 * 
 * mentre quella corrispondente al numero 4 e'
 * la matrice
 * 
 *  1  2  3  4 
 * 12 13 14  5 
 * 11 16 15  6 
 * 10  9  8  7 
 * 
 * e quella corrispondente al numero 5 e'
 * la matrice
 * 
 *  1  2  3  4  5 
 * 16 17 18 19  6 
 * 15 24 25 20  7 
 * 14 23 22 21  8 
 * 13 12 11 10  9 
 * 
 * Scrivere un metodo, chiamato spiralMatrix,
 * che, dato in input un numero positivo n e
 * un numero x compreso tra 1 e n*n, restituisca
 * un array di due elementi corrispondenti alla
 * riga e alla colonna della posizione in cui
 * si trova x all'interno della matrice a spirale
 * corrispondente a n.
 * 
 * ESEMPI
 * Input: 3, 6
 * Output: {2,1}
 * 
 * Input: 3, 9
 * Output: {1,1}
 * 
 * Input: 4, 1
 * Output: {0,0}
 * 
 * Input: 4, 12
 * Output: {1,0}
 * 
 * Input: 4, 15
 * Output: {2,2}
 * 
 * SUGGERIMENTO: puo' convenire costruire prima la matrice
 * a spirale e cercare poi nella matrice la posizione
 * del valore x. Poiche' i numeri che appaiono nella
 * matrice a spirale sono positivi, si puo' usare lo
 * 0 come indicatore che una posizione della matrice
 * non e' ancora stata occupata. Quindi, la costruzione
 * della matrice puo' essere effettuata muovendosi
 * in ciascuna direzione fintanto che si incontrano 0 e
 * fintanto che non si fuoriesce dalla matrice.
 */
// metodo che crea matrice spirale di n e restituisce x,y di un dato elemento
int[] matrix(int n, int m) {
	int[][] matrix = emptyMatrix(n);
	fillMatrix(matrix);
	int x = 0;
	int y = 0;
	boolean found = true;
	while (found) {
	}
	return {x, y};
}

//checked
int[][] emptyMatrix(int n) {
	int[][] matrix = new int[n][n];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			matrix[i][j] = 0;
		}
	}
	return matrix;
}

void fillMatrix(int[][] m) {
	int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // direzioni
	int[] c = {0, 0}; // dove mi trovo
	int val = 1, cd = 0, n = m.length; // cd = current direction
	while (val <= n * n) {
		// for( t= 0; t<= n; t++)
		m[c[0]][c[1]] = val;
		int nr = c[0] + dir[cd][0]; // nuova riga
		int nc = c[1] + dir[cd][1]; // nuova colonna
		if (nr >= 0 && nr < n && nc >= 0 && nc < n && m[nr][nc] == 0) {
			c[0] = nr;
			c[1] = nc;
		} else {
			cd = (cd + 1) % 4;
			c[0] = c[0] + dir[cd][0];
			c[1] = c[1] + dir[cd][1];
		}
		val = val + 1;
	}
}

int[] spiralMatrix(int n, int x) {
	int mX = -1, mY = -1;
	int[][] matrix = emptyMatrix(n);
	fillMatrix(matrix);
	int i = 0;
	while(mX == -1)
	{
		int j = 0;
		while(mX == -1 && j < n)
		{
			if(matrix[i][j] == x)
			{
				mX = j;
				mY = i;
			}
			j++;
		}
		i++;
	}
	int[] position = {mY, mX};
	return position;
}

//Main code and test
//int[][] matrix = emptyMatrix(4);
//fillMatrix(matrix);

int[] matrix = spiralMatrix(6,4);
System.out.println(matrix);

//LEGGERE E' BENE, SCOMPORRE E' UTILE, TESTARE NON E' UNA PERDITA DI TEMPO                 